// Code generated by github.com/actgardner/gogen-avro. DO NOT EDIT.
/*
 * SOURCE:
 *     namespace.avsc
 */
package avro

import (
	"io"
	"fmt"

	"github.com/actgardner/gogen-avro/vm"
	"github.com/actgardner/gogen-avro/vm/types"
)


type UnionNullUUIDTypeEnum int

const (
	UnionNullUUIDTypeEnumUUID UnionNullUUIDTypeEnum = 1
)

type UnionNullUUID struct { 
	UUID UUID

	UnionType UnionNullUUIDTypeEnum
}

func writeUnionNullUUID(r *UnionNullUUID, w io.Writer) error { 
	if r == nil {
		return vm.WriteLong(int64(0), w)
	} 
	if err := vm.WriteLong(int64(r.UnionType), w); err != nil {
		return err
	}
	switch r.UnionType{ 
	case UnionNullUUIDTypeEnumUUID:
		return writeUUID(r.UUID, w)
	}
	return fmt.Errorf("invalid value for *UnionNullUUID")
}

func (_ *UnionNullUUID) SetBoolean(v bool) { panic("Unsupported operation") }
func (_ *UnionNullUUID) SetInt(v int32) { panic("Unsupported operation") }
func (_ *UnionNullUUID) SetFloat(v float32) { panic("Unsupported operation") }
func (_ *UnionNullUUID) SetDouble(v float64) { panic("Unsupported operation") }
func (_ *UnionNullUUID) SetBytes(v []byte) { panic("Unsupported operation") }
func (_ *UnionNullUUID) SetString(v string) { panic("Unsupported operation") }

func (r *UnionNullUUID) SetLong(v int64) { 
	r.UnionType = (UnionNullUUIDTypeEnum)(v)
}

func (r *UnionNullUUID) Get(i int) types.Field {
	switch (i) { 
	case 1:
		
		r.UUID = UUID{}
		
		
		return &r.UUID
		
	
	}
	panic("Unknown field index")
}

func (r *UnionNullUUID) Clear(i int) { panic("Unsupported operation") }
func (_ *UnionNullUUID) SetDefault(i int) { panic("Unsupported operation") }
func (_ *UnionNullUUID) AppendMap(key string) types.Field { panic("Unsupported operation") }
func (_ *UnionNullUUID) ClearMap(key string) { panic("Unsupported operation") }
func (_ *UnionNullUUID) AppendArray() types.Field { panic("Unsupported operation") }
func (_ *UnionNullUUID) Finalize()  { }
